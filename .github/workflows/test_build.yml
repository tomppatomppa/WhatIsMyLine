name: Docker Image CI

on:
  push:
    branches: ['dev']
  pull_request:
    branches: ['dev']

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TEST_ACCESS_TOKEN: ${{secrets.TEST_ACCESS_TOKEN}}
      TEST_REFRESH_TOKEN: ${{secrets.TEST_REFRESH_TOKEN}}
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      CLIENT_ID: ${{secrets.CLIENT_ID}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      PORT: ${{secrets.PORT}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      SQL_HOST: ${{secrets.SQL_HOST}}
      SQL_PORT: ${{secrets.SQL_PORT}}
      DATABASE: ${{secrets.DATABASE}}
      FLASK_APP: ${{secrets.FLASK_APP}}
    steps:
      - uses: actions/checkout@v3
      - name: file permission
        run: chmod +x server/entrypoint.sh

      # - name: Load environment variables
      #   run: source .env.dev

      - name: Build
        run: docker-compose -f docker-compose.yml up -d

      # - name: Delay for 3 seconds before running tests
      #   run: sleep 3

      # - name: Run frontend tests
      #   run: |
      #     docker exec react-frontend npm run test-ci | tee frontend_tests_output.txt

      #     if grep -q "FAIL" frontend_tests_output.txt; then
      #       echo "Pattern 'FAIL' found in frontend test results. Exiting with code 1."
      #       exit 1
      #     else
      #       echo "Pattern 'FAIL' not found in frontend test results."
      #     fi
      - name: Run backend Tests
        run: |
          docker-compose -f docker-compose.yml exec -T backend python manage.py run_tests | tee tests_output.txt # Run tests

          if grep -q "FAILED tests" tests_output.txt; then
            echo "Pattern 'FAILED tests' found in test results. Exiting with code 1."
            exit 1
          else
            echo "Pattern 'FAILED tests' not found in test results."
          fi
